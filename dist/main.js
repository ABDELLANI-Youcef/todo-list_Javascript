(()=>{"use strict";var t={426:(t,e,n)=>{n.d(e,{Z:()=>i});var r=n(15),a=n.n(r),o=n(645),s=n.n(o)()(a());s.push([t.id,".tabcontent {\n  display: none;\n}\n\n.shown {\n  display: block;\n}\n\n.add_proj_icon {\n  width: 1rem;\n  height: 1rem;\n}\n\n.hide {\n  display: none;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,aAAa;AACf;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,WAAW;EACX,YAAY;AACd;;AAEA;EACE,aAAa;AACf",sourcesContent:[".tabcontent {\n  display: none;\n}\n\n.shown {\n  display: block;\n}\n\n.add_proj_icon {\n  width: 1rem;\n  height: 1rem;\n}\n\n.hide {\n  display: none;\n}\n"],sourceRoot:""}]);const i=s},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var a={};if(r)for(var o=0;o<this.length;o++){var s=this[o][0];null!=s&&(a[s]=!0)}for(var i=0;i<t.length;i++){var d=[].concat(t[i]);r&&a[d[0]]||(n&&(d[2]?d[2]="".concat(n," and ").concat(d[2]):d[2]=n),e.push(d))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}t.exports=function(t){var n,r,a=(r=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,a=!1,o=void 0;try{for(var s,i=t[Symbol.iterator]();!(r=(s=i.next()).done)&&(n.push(s.value),!e||n.length!==e);r=!0);}catch(t){a=!0,o=t}finally{try{r||null==i.return||i.return()}finally{if(a)throw o}}return n}}(n,r)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(t,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=a[1],s=a[3];if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),d="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),c="/*# ".concat(d," */"),u=s.sources.map((function(t){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(t," */")}));return[o].concat(u).concat([c]).join("\n")}return[o].join("\n")}},379:(t,e,n)=>{var r,a=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),o=[];function s(t){for(var e=-1,n=0;n<o.length;n++)if(o[n].identifier===t){e=n;break}return e}function i(t,e){for(var n={},r=[],a=0;a<t.length;a++){var i=t[a],d=e.base?i[0]+e.base:i[0],c=n[d]||0,u="".concat(d," ").concat(c);n[d]=c+1;var l=s(u),m={css:i[1],media:i[2],sourceMap:i[3]};-1!==l?(o[l].references++,o[l].updater(m)):o.push({identifier:u,updater:h(m,e),references:1}),r.push(u)}return r}function d(t){var e=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(e);else{var s=a(t.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var c,u=(c=[],function(t,e){return c[t]=e,c.filter(Boolean).join("\n")});function l(t,e,n,r){var a=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=u(e,a);else{var o=document.createTextNode(a),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(o,s[e]):t.appendChild(o)}}function m(t,e,n){var r=n.css,a=n.media,o=n.sourceMap;if(a?t.setAttribute("media",a):t.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var p=null,_=0;function h(t,e){var n,r,a;if(e.singleton){var o=_++;n=p||(p=d(e)),r=l.bind(null,n,o,!1),a=l.bind(null,n,o,!0)}else n=d(e),r=m.bind(null,n,e),a=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else a()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=i(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<n.length;r++){var a=s(n[r]);o[a].references--}for(var d=i(t,e),c=0;c<n.length;c++){var u=s(n[c]);0===o[u].references&&(o[u].updater(),o.splice(u,1))}n=d}}}},429:(t,e,n)=>{t.exports=n.p+"82afad6e38ab3c57406e.png"},908:(t,e,n)=>{t.exports=n.p+"6d4955812aa5e79611ae.png"},247:(t,e,n)=>{t.exports=n.p+"376ef3c8c83b0ea11c6d.png"},563:(t,e,n)=>{t.exports=n.p+"2fce6214b7c60c745aa6.png"},312:(t,e,n)=>{t.exports=n.p+"48a509a89a20feb467d3.png"},883:(t,e,n)=>{t.exports=n.p+"e47be2e47d96864e3de4.png"},747:(t,e,n)=>{n.d(e,{Z:()=>r});const r=class{constructor(t,e){this._title=t,this._tasks=[],this._id=e,this._taskCounter=0}get title(){return this._title}get id(){return this._id}get taskCounter(){return this._taskCounter}set title(t){this._title=t}get tasks(){return this._tasks}addTask(t){this._tasks.push(t),this._taskCounter+=1}removeTask(t){this._tasks.splice(t,1)}}},507:(t,e,n)=>{n.d(e,{Z:()=>r});const r=class{constructor(t,e,n=911,r,a,o){this._title=t,this._description=e,this._dueDate=n,this._priority=r,this._status="To-do",this._projId=a,this._id=o}get title(){return this._title}set title(t){this._title=t}get description(){return this._description}get projId(){return this._projId}get id(){return this._id}set description(t){this._description=t}get dueDate(){return this._dueDate}set dueDate(t){this._dueDate=t}get priority(){return this._priority}set priority(t){this._priority=t}get status(){return this._status}set id(t){this._id=t}set status(t){this._status=t}formatedDueDate(){return new Date(this._dueDate)}}}},e={};function n(r){if(e[r])return e[r].exports;var a=e[r]={id:r,exports:{}};return t[r](a,a.exports,n),a.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),(()=>{var t=n(379),e=n.n(t),r=n(426);e()(r.Z,{insert:"head",singleton:!1}),r.Z.locals;const a=n(747).Z,o=n(507).Z,s=document.createElement("div");s.setAttribute("id","tasks_container");const i=localStorage.getItem("projectsList")?JSON.parse(localStorage.getItem("projectsList")):[],d=localStorage.getItem("countProjects")?JSON.parse(localStorage.getItem("countProjects")):0,c=(t,e)=>{let n=0,r=t.length-1,a=Math.floor((n+r)/2),o=!1;for(;n<=r&&!o;)o=t[a].id===e,o||(t[a].id>e?r=a-1:n=a+1,a=Math.floor((n+r)/2));return a},u=t=>{const e=t._title,n=t._description,r=t._dueDate,a=t._priority,s=t._status,i=t._projId,d=t._id,c=new o(e,n,r,a,i,d);return c.status=s,c},l=i.map((t=>(t=>{const e=t._title,n=t._id,r=t._tasks,o=new a(e,n);for(let t=0;t<r.length;t+=1){let e=u(r[t]);e.id=t,o.addTask(e)}return o})(t)));console.log("variable");let m=parseInt(d);var p=n(429),_=n(312),h=n(908);function f(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function g(t){f(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function b(t,e){f(2,arguments);var n=g(t),r=g(e),a=n.getTime()-r.getTime();return a<0?-1:a>0?1:a}function y(t,e){f(2,arguments);var n=g(t),r=g(e),a=n.getFullYear()-r.getFullYear(),o=n.getMonth()-r.getMonth();return 12*a+o}function v(t,e){f(2,arguments);var n=g(t),r=g(e),a=b(n,r),o=Math.abs(y(n,r));n.setMonth(n.getMonth()-a*o);var s=b(n,r)===-a,i=a*(o-s);return 0===i?0:i}function k(t,e){f(2,arguments);var n=g(t),r=g(e);return n.getTime()-r.getTime()}function A(t,e){f(2,arguments);var n=k(t,e)/1e3;return n>0?Math.floor(n):Math.ceil(n)}var w={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function j(t){return function(e){var n=e||{},r=n.width?String(n.width):t.defaultWidth;return t.formats[r]||t.formats[t.defaultWidth]}}var S,$={date:j({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:j({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:j({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},E={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function C(t){return function(e,n){var r,a=n||{};if("formatting"===(a.context?String(a.context):"standalone")&&t.formattingValues){var o=t.defaultFormattingWidth||t.defaultWidth,s=a.width?String(a.width):o;r=t.formattingValues[s]||t.formattingValues[o]}else{var i=t.defaultWidth,d=a.width?String(a.width):t.defaultWidth;r=t.values[d]||t.values[i]}return r[t.argumentCallback?t.argumentCallback(e):e]}}function x(t){return function(e,n){var r=String(e),a=n||{},o=a.width,s=o&&t.matchPatterns[o]||t.matchPatterns[t.defaultMatchWidth],i=r.match(s);if(!i)return null;var d,c=i[0],u=o&&t.parsePatterns[o]||t.parsePatterns[t.defaultParseWidth];return d="[object Array]"===Object.prototype.toString.call(u)?function(t,e){for(var n=0;n<t.length;n++)if(t[n].test(c))return n}(u):function(t,e){for(var n in t)if(t.hasOwnProperty(n)&&t[n].test(c))return n}(u),d=t.valueCallback?t.valueCallback(d):d,{value:d=a.valueCallback?a.valueCallback(d):d,rest:r.slice(c.length)}}}const I={code:"en-US",formatDistance:function(t,e,n){var r;return n=n||{},r="string"==typeof w[t]?w[t]:1===e?w[t].one:w[t].other.replace("{{count}}",e),n.addSuffix?n.comparison>0?"in "+r:r+" ago":r},formatLong:$,formatRelative:function(t,e,n,r){return E[t]},localize:{ordinalNumber:function(t,e){var n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:C({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:C({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return Number(t)-1}}),month:C({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:C({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:C({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(S={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t,e){var n=String(t),r=e||{},a=n.match(S.matchPattern);if(!a)return null;var o=a[0],s=n.match(S.parsePattern);if(!s)return null;var i=S.valueCallback?S.valueCallback(s[0]):s[0];return{value:i=r.valueCallback?r.valueCallback(i):i,rest:n.slice(o.length)}}),era:x({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:x({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:x({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:x({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:x({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function M(t){return function(t,e){if(null==t)throw new TypeError("assign requires that input parameter not be null or undefined");for(var n in e=e||{})e.hasOwnProperty(n)&&(t[n]=e[n]);return t}({},t)}var q=6e4;function L(t){return t.getTime()%q}function T(t){var e=new Date(t.getTime()),n=Math.ceil(e.getTimezoneOffset());e.setSeconds(0,0);var r=n>0?(q+L(e))%q:L(e);return n*q+r}var D=1440,P=43200;function W(t,e,n){f(2,arguments);var r=n||{},a=r.locale||I;if(!a.formatDistance)throw new RangeError("locale must contain formatDistance property");var o=b(t,e);if(isNaN(o))throw new RangeError("Invalid time value");var s,i,d=M(r);d.addSuffix=Boolean(r.addSuffix),d.comparison=o,o>0?(s=g(e),i=g(t)):(s=g(t),i=g(e));var c,u=A(i,s),l=(T(i)-T(s))/1e3,m=Math.round((u-l)/60);if(m<2)return r.includeSeconds?u<5?a.formatDistance("lessThanXSeconds",5,d):u<10?a.formatDistance("lessThanXSeconds",10,d):u<20?a.formatDistance("lessThanXSeconds",20,d):u<40?a.formatDistance("halfAMinute",null,d):u<60?a.formatDistance("lessThanXMinutes",1,d):a.formatDistance("xMinutes",1,d):0===m?a.formatDistance("lessThanXMinutes",1,d):a.formatDistance("xMinutes",m,d);if(m<45)return a.formatDistance("xMinutes",m,d);if(m<90)return a.formatDistance("aboutXHours",1,d);if(m<D){var p=Math.round(m/60);return a.formatDistance("aboutXHours",p,d)}if(m<2520)return a.formatDistance("xDays",1,d);if(m<P){var _=Math.round(m/D);return a.formatDistance("xDays",_,d)}if(m<86400)return c=Math.round(m/P),a.formatDistance("aboutXMonths",c,d);if((c=v(i,s))<12){var h=Math.round(m/P);return a.formatDistance("xMonths",h,d)}var y=c%12,k=Math.floor(c/12);return y<3?a.formatDistance("aboutXYears",k,d):y<9?a.formatDistance("overXYears",k,d):a.formatDistance("almostXYears",k+1,d)}function N(t,e){return f(1,arguments),W(t,Date.now(),e)}const O=t=>{const e=document.createElement("div");e.setAttribute("class","task_card"),e.setAttribute("id",`task_card_${t.projId}_${t.id}`);const n=document.createElement("div");n.setAttribute("id",`task_show_mode_${t.projId}_${t.id}`),n.classList.add("show_div_task");const r=document.createElement("div");r.setAttribute("class","div_show_mode_left");const a=document.createElement("div");a.setAttribute("id",`display_task_priority_${t.projId}_${t.id}`),a.classList.add(`priority_box_${t.priority}`,"priority_box");const o=document.createElement("h3");o.setAttribute("id",`display_task_title_${t.projId}_${t.id}`),o.textContent=t.title,r.append(a,o);const s=document.createElement("div");s.setAttribute("class","div_show_mode_right");const i=document.createElement("span");i.textContent=N(t.formatedDueDate(),{addSuffix:!0}),i.setAttribute("id",`display_task_date_${t.projId}_${t.id}`);const d=new Image;d.setAttribute("src",_),d.setAttribute("class","add_proj_icon"),d.dataset.TaskId=t.id,d.dataset.TaskProjId=t.projId,d.addEventListener("click",(t=>R(t)));const c=new Image;c.setAttribute("src",h),c.setAttribute("class","add_proj_icon"),c.dataset.TaskId=t.id,c.dataset.TaskProjId=t.projId,c.addEventListener("click",(t=>Z(t))),s.append(i,d,c);const u=document.createElement("div");u.setAttribute("class","div_show_mode_top"),u.append(r,s);const l=document.createElement("div");l.setAttribute("class","div_show_mode_buttom");const m=document.createElement("span");m.setAttribute("id",`display_task_description_${t.projId}_${t.id}`),m.textContent=t.description;const p=document.createElement("span");p.setAttribute("id",`display_task_status_${t.projId}_${t.id}`),p.classList.add("task_status",`task_status_${t.status}`),p.textContent=t.status,l.append(m,p);const f=document.createElement("div");f.setAttribute("id",`task_edit_mode_${t.projId}_${t.id}`),f.classList.add("edit_div_task","hide");const g=document.createElement("div");g.classList.add("edit_task_form_wrapper");const b=document.createElement("input");b.setAttribute("type","text"),b.setAttribute("id",`edit_task_title_${t.projId}_${t.id}`),b.setAttribute("value",t.title);const y=document.createElement("input");y.setAttribute("type","text"),y.setAttribute("id",`edit_task_description_${t.projId}_${t.id}`),y.setAttribute("value",t.description);const v=document.createElement("span");v.setAttribute("class","edit_task_select_span");const k=document.createElement("label");k.textContent="Priority:",k.setAttribute("for",`edit_task_priority_${t.projId}_${t.id}`);const A=document.createElement("select");A.setAttribute("id",`edit_task_priority_${t.projId}_${t.id}`);const w=document.createElement("option");w.setAttribute("value","hight"),w.textContent="Hight";const j=document.createElement("option");j.setAttribute("value","medium"),j.textContent="Medium";const S=document.createElement("option");S.setAttribute("value","low"),S.textContent="Low",A.append(w,j,S),A.value=t.priority,v.append(k,A);const $=document.createElement("span");$.setAttribute("class","edit_task_select_span");const E=document.createElement("label");E.textContent="Status:",E.setAttribute("for",`edit_task_status_${t.projId}_${t.id}`);const C=document.createElement("select");C.setAttribute("id",`edit_task_status_${t.projId}_${t.id}`);const x=document.createElement("option");x.setAttribute("value","To-do"),x.textContent="To-do";const I=document.createElement("option");I.setAttribute("value","In-progress"),I.textContent="In progress";const M=document.createElement("option");M.setAttribute("value","Done"),M.textContent="Done",C.append(x,I,M),C.value=t.status,$.append(E,C);const q=document.createElement("span");v.setAttribute("class","edit_task_date_span");const L=document.createElement("label");L.textContent="Schedule:",L.setAttribute("for",`edit_task_date_${t.projId}_${t.id}`);const T=document.createElement("input");T.setAttribute("type","date"),T.setAttribute("id",`edit_task_date_${t.projId}_${t.id}`),q.append(L,T);const D=document.createElement("div");D.setAttribute("class","edit_task_form_buttons");const P=document.createElement("button");P.dataset.TaskId=t.id,P.dataset.TaskProjId=t.projId,P.addEventListener("click",(t=>B(t))),P.textContent="Submit";const W=document.createElement("button");return W.textContent="Cancel",W.dataset.TaskId=t.id,W.dataset.TaskProjId=t.projId,W.addEventListener("click",(t=>R(t))),D.append(P,W),g.append(b,y,v,$,q,D),f.append(g),n.append(u,l),e.append(n,f),e},X=n(747).Z,J=n(507).Z,F=()=>{document.querySelector("#project_title").value="",document.querySelector("#add_project_form").classList.toggle("hide")},Y=t=>{let e=t.target.dataset.projectId;document.querySelector(`#task_title_${e}`).value="",document.querySelector(`#task_description_${e}`).value="",document.querySelector(`#task_priority_${e}`).value="low",document.querySelector(`#add_task_form_${e}`).classList.toggle("hide")},Z=t=>{let e=t.target.dataset.TaskId,n=t.target.dataset.TaskProjId,r=document.querySelector(`#task_card_${n}_${e}`);document.querySelector(`#tasks_wrapper_${n}`).removeChild(r);let a=c(l,n),o=l[a];o.removeTask(e),console.log(`after delete ${o.tasks}`),localStorage.setItem("projectsList",JSON.stringify(l))},R=t=>{let e=t.target.dataset.TaskId,n=t.target.dataset.TaskProjId,r=c(l,n),a=l[r],o=c(a.tasks,e),s=a.tasks[o];document.querySelector(`#edit_task_title_${n}_${e}`).value=s.title,document.querySelector(`#edit_task_description_${n}_${e}`).value=s.description,document.querySelector(`#edit_task_priority_${n}_${e}`).value=s.priority,document.querySelector(`#edit_task_status_${n}_${e}`).value=s.status,document.querySelector(`#task_show_mode_${n}_${e}`).classList.toggle("hide"),document.querySelector(`#task_edit_mode_${n}_${e}`).classList.toggle("hide")},B=t=>{let e=t.target.dataset.TaskId,n=t.target.dataset.TaskProjId,r=c(l,n),a=l[r],o=c(a.tasks,e),s=a.tasks[o];const i=s.priority,d=s.status;let u=document.querySelector(`#edit_task_title_${n}_${e}`);s.title=u.value;let m=document.querySelector(`#edit_task_description_${n}_${e}`);s.description=m.value;let p=document.querySelector(`#edit_task_priority_${n}_${e}`);s.priority=p.value;let _=document.querySelector(`#edit_task_date_${n}_${e}`);s.dueDate=_.value;let h=document.querySelector(`#edit_task_status_${n}_${e}`);s.status=h.value,document.querySelector(`#display_task_title_${n}_${e}`).textContent=s.title,document.querySelector(`#display_task_description_${n}_${e}`).textContent=s.description;const f=document.querySelector(`#display_task_priority_${n}_${e}`);f.classList.remove(`priority_box_${i}`),f.classList.add(`priority_box_${s.priority}`),document.querySelector(`#display_task_date_${n}_${e}`).textContent=N(s.formatedDueDate(),{addSuffix:!0});const g=document.querySelector(`#display_task_status_${n}_${e}`);g.textContent=s.status,g.classList.remove(`task_status_${d}`),g.classList.add(`task_status_${s.status}`),document.querySelector(`#task_show_mode_${n}_${e}`).classList.toggle("hide"),document.querySelector(`#task_edit_mode_${n}_${e}`).classList.toggle("hide"),localStorage.setItem("projectsList",JSON.stringify(l))};var H=n(883),z=n(247),U=n(563);const Q=t=>{const e=document.createElement("div");e.setAttribute("id",`project_container_${t.id}`),e.classList.add("project_container");const n=document.createElement("span");n.setAttribute("id",`project_show_mode_${t.id}`),n.classList.add("span_project");const r=document.createElement("span");r.setAttribute("id",`project_edit_mode_${t.id}`),r.classList.add("span_project","hide");const a=document.createElement("button");a.setAttribute("id",`show_project_title_${t.id}`),a.dataset.projectId=t.id,a.addEventListener("click",(t=>(t=>{let e=t.target.dataset.projectId,n=document.querySelector(`#proj_${e}`),r=document.querySelector(".shown");null!==r&&r.classList.toggle("shown"),n.classList.toggle("shown")})(t))),a.setAttribute("class","tablinks"),a.textContent=t.title;const o=new Image;o.setAttribute("src",_),o.setAttribute("class","add_proj_icon"),o.dataset.projectId=t.id,o.addEventListener("click",(t=>(t=>{let e=t.target.dataset.projectId;document.querySelector(`#project_show_mode_${e}`).classList.toggle("hide"),document.querySelector(`#project_edit_mode_${e}`).classList.toggle("hide")})(t)));const i=new Image;i.setAttribute("src",h),i.setAttribute("class","add_proj_icon"),i.dataset.projectId=t.id,i.addEventListener("click",(t=>(t=>{let e=t.target.dataset.projectId,n=document.querySelector(`#project_container_${e}`);document.querySelector("#tabs").removeChild(n),((t,e)=>{let n=c(t,e);t.splice(n,1)})(l,e),console.log(`after delete ${l}`),localStorage.setItem("projectsList",JSON.stringify(l));let r=document.querySelector("#tasks_container"),a=document.querySelector(`#proj_${e}`);r.removeChild(a),null===document.querySelector(".shown")&&l.length>0&&document.querySelector(`#proj_${l[0].id}`).classList.add("shown")})(t))),n.append(a,o,i);const d=document.createElement("input");d.setAttribute("type","text"),d.setAttribute("id",`edit_project_title_${t.id}`),d.setAttribute("value",t.title);const u=new Image;u.setAttribute("src",z),u.setAttribute("class","add_proj_icon"),u.dataset.projectId=t.id,u.addEventListener("click",(t=>(t=>{let e=t.target.dataset.projectId;const n=document.querySelector(`#edit_project_title_${e}`);((t,e,n)=>{t[c(t,e)].title=n,localStorage.setItem("projectsList",JSON.stringify(t))})(l,e,n.value),document.querySelector(`#show_project_title_${e}`).textContent=n.value,document.querySelector(`#project_show_mode_${e}`).classList.toggle("hide"),document.querySelector(`#project_edit_mode_${e}`).classList.toggle("hide")})(t)));const m=new Image;return m.setAttribute("src",U),m.setAttribute("class","add_proj_icon"),m.dataset.projectId=t.id,m.addEventListener("click",(t=>(t=>{let e=t.target.dataset.projectId;document.querySelector(`#project_show_mode_${e}`).classList.toggle("hide"),document.querySelector(`#project_edit_mode_${e}`).classList.toggle("hide");const n=document.querySelector(`#edit_project_title_${e}`),r=document.querySelector(`#show_project_title_${e}`);n.value=r.textContent})(t))),r.append(d,u,m),e.append(n,r),s.append((t=>{const e=document.createElement("div");e.setAttribute("class","tabcontent"),e.setAttribute("id",`proj_${t.id}`);const n=document.createElement("div");n.setAttribute("class","project_header");const r=document.createElement("h2");r.setAttribute("class","header_title"),r.textContent=t.title;const a=document.createElement("button");a.dataset.projectId=t.id,a.addEventListener("click",(t=>Y(t))),a.setAttribute("class","header_add_task");const o=new Image;o.setAttribute("src",p),o.setAttribute("class","add_proj_icon");const s=document.createElement("span");s.setAttribute("class","add_task_span"),s.textContent="Add a Task",a.append(o,s),n.append(r,a);const i=document.createElement("div");i.setAttribute("class","add_task_form_wrapper"),i.classList.add("hide"),i.setAttribute("id",`add_task_form_${t.id}`);const d=document.createElement("input");d.setAttribute("type","text"),d.setAttribute("id",`task_title_${t.id}`),d.setAttribute("placeholder","Type your task title here!");const u=document.createElement("input");u.setAttribute("type","text"),u.setAttribute("id",`task_description_${t.id}`),u.setAttribute("placeholder","Type a description for your task here!");const m=document.createElement("span");m.setAttribute("class","add_task_select_span");const _=document.createElement("label");_.textContent="Priority:",_.setAttribute("for",`task_priority_${t.id}`);const h=document.createElement("select");h.setAttribute("id",`task_priority_${t.id}`);const f=document.createElement("option");f.setAttribute("value","hight"),f.textContent="Hight";const g=document.createElement("option");g.setAttribute("value","medium"),g.textContent="Medium";const b=document.createElement("option");b.setAttribute("value","low"),b.textContent="Low",h.append(f,g,b),m.append(_,h);const y=document.createElement("span");m.setAttribute("class","add_task_date_span");const v=document.createElement("label");v.textContent="Schedule:",v.setAttribute("for",`task_date_${t.id}`);const k=document.createElement("input");k.setAttribute("type","date"),k.setAttribute("id",`task_date_${t.id}`),y.append(v,k);const A=document.createElement("div");A.setAttribute("class","add_task_form_buttons");const w=document.createElement("button");w.dataset.projectId=t.id,w.addEventListener("click",(t=>(t=>{let e=t.target.dataset.projectId,n=c(l,e),r=l[n],a=document.querySelector(`#task_title_${e}`).value,o=document.querySelector(`#task_description_${e}`).value,s=document.querySelector(`#task_priority_${e}`).value,i=document.querySelector(`#task_date_${e}`).value;const d=new J(a,o,i,s,e,r.taskCounter);((t,e,n)=>{t[c(t,e)].addTask(n)})(l,e,d),document.querySelector(`#tasks_wrapper_${e}`).append(O(d)),document.querySelector(`#add_task_form_${e}`).classList.toggle("hide"),localStorage.setItem("projectsList",JSON.stringify(l))})(t))),w.textContent="Create Task";const j=document.createElement("button");j.textContent="Cancel",j.dataset.projectId=t.id,j.addEventListener("click",(t=>Y(t))),A.append(w,j),i.append(d,u,m,y,A);const S=document.createElement("div");return S.setAttribute("id",`tasks_wrapper_${t.id}`),S.setAttribute("class","tasks_wrapper"),t.tasks.forEach((t=>(S.append(O(t)),S))),e.append(n,i,S),e})(t)),e},V=(n(747).Z,n(507).Z,document.querySelector("#container"));if(console.log("index"),V.append((t=>{const e=document.createElement("div");e.setAttribute("id","project_nav");const n=document.createElement("div");n.setAttribute("class","logo_project"),n.textContent="My Projects";const r=document.createElement("button");r.setAttribute("id","add_project");const a=new Image;a.setAttribute("src",H),a.setAttribute("class","add_proj_icon");const o=document.createElement("span");o.textContent="Projects",r.append(o,a),r.addEventListener("click",(()=>F()));const s=document.createElement("div");s.setAttribute("id","add_project_form"),s.classList.add("hide");const i=document.createElement("input");i.setAttribute("type","text"),i.setAttribute("id","project_title"),i.setAttribute("placeholder","Type your project title here!");const d=document.createElement("div");d.setAttribute("class","add_project_form_buttons");const c=document.createElement("button");c.addEventListener("click",(()=>(()=>{let t=document.querySelector("#project_title").value;m+=1;const e=new X(t,m);l.push(e),localStorage.setItem("countProjects",m),localStorage.setItem("projectsList",JSON.stringify(l)),document.querySelector("#tabs").append(Q(e));let n=document.querySelector(`#proj_${e.id}`),r=document.querySelector(".shown");null!==r&&r.classList.toggle("shown"),n.classList.add("shown"),document.querySelector("#add_project_form").classList.toggle("hide")})())),c.textContent="Create Project";const u=document.createElement("button");u.textContent="Cancel",u.addEventListener("click",(()=>F())),d.append(c,u),s.append(i,d);const p=document.createElement("div");return p.setAttribute("id","tabs"),t.forEach((t=>(p.append(Q(t)),p))),e.append(n,r,s,p),e})(l),s),l.length>0){console.log(`#proj_${l[0].id}`);let t=document.querySelector(`#proj_${l[0].id}`);console.log(document.querySelector(`#proj_${l[0].id}`)),t.classList.add("shown")}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,